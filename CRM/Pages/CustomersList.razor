@page "/customerlist"

@attribute [Authorize]
@inherits OwningComponentBase<CustomerService>
@inject CustomerService customerService
@inject IJSRuntime jsRuntime

<h3>لیست مشتریان</h3>
<br />

@if (customerService == null)
{
    <p><em>درحال فراخوانی اطلاعات...</em></p>
}
else
{
    <p>
        <a class="btn btn-primary" @onclick="CreateCustomerModal">
            <i class="fas fa-user-plus"></i>
            ایجاد مشتری جدید
        </a>
    </p>
    <table class="table table-responsive">
        <thead>
            <tr class="d-flex">
                <th class="col-1">ردیف</th>
                <th class="col-5">نام و نام خانوادگی</th>
                <th class="col-2">تلفن همراه</th>
                <th class="col-3">پست الکترونیک</th>
                <th class="col-1">فعال</th>
                <th class="col-2">تاریخ ایجاد</th>
                <th class="col-2">عملیات</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customerRecord in customers)
            {
                <tr class="d-flex">
                    <td class="col-1">@(++rowIndex + (currentPage - 1) * 10)</td>
                    <td class="col-5">@customerRecord.FullName</td>
                    <td class="col-2">@customerRecord.CellPhone</td>
                    <td class="col-3">@customerRecord.Email</td>
                    <td class="col-1"><input type="checkbox" disabled="disabled" @bind="customerRecord.IsEnable" /></td>
                    <td class="col-2">@customerRecord.CreatedTime.ToString("yyyy-MM-dd")</td>
                    <td class="col-2">
                        <a class="btn btn-primary" @onclick="(() => EditCustomerModal(customerRecord))" title="ویرایش">
                            <i class="fas fa-user-edit"></i>
                        </a>
                        <a class="btn btn-danger" @onclick="(() => DeleteCustomer(customerRecord))" title="حذف">
                            <i class="fas fa-user-times"></i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="6">
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        if (i != currentPage)
                        {
                            <a class="btn ml-2" @onclick="(() => TablePageChanged(i))" title="صفحه @i" >@i</a>
                        }
                        else
                        {
                            <span class="btn ml-2" style="text-decoration: underline; font-weight: bold;"
                                  title="صفحه @i">@i</span>
                            }
                        }
                </td>
                <td>
                    تعداد ردیف‌ها: @totalRecords
                </td>
            </tr>
        </tfoot>
    </table>
    @*<br />
        <input type="submit" id="btnSend" class="btn btn-success" value="ارسال پیام" @onclick="SendMessage" />
        <br />
        <p>
            تعداد انتخاب : @selectedCustomersCount
        </p>*@

    @if (showCustomerPopup)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">
                            @(isEdit == true ? "ویرایش اطلاعات" : "ایجاد")
                            مشتری
                        </h3>
                        <button type="button" class="close" @onclick="CloseCustomerModal">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <input class="form-control" type="text" placeholder="نام و نام خانوادگی"
                               @bind="customer.FullName" />
                        <input class="form-control" type="number" placeholder="شماره تلفن همراه"
                               @bind="customer.CellPhone" />
                        <input class="form-control" type="email" placeholder="پست الکترونیک"
                               @bind="customer.Email" />
                        <br />
                        <button class="btn btn-primary" @onclick="CreateCustomer">ذخیره</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {

    #region Properties

    private bool showCustomerPopup = false;
    private bool isEdit = false;
    private int[] selectedCustomers;
    private int selectedCustomersCount;

    private int rowIndex = 0;
    private int totalRecords = 0;
    private int totalPages = 0;
    private int currentPage = 1;

    private List<CustomerViewModel> customers = new List<CustomerViewModel>();
    private CustomerViewModel customer = new CustomerViewModel();

    protected override async Task OnInitializedAsync()
    {
        await GetAllTableRecords();
    }

    #endregion

    #region Actions

    private async Task GetAllTableRecords()
    {
        var customersList = await customerService.GetCustomersAsync(currentPage, 10);
        customers = customersList.Customers;
        totalRecords = customersList.TotlaCount;
        rowIndex = 0;
        totalPages = (totalRecords % 10) > 0
            ? (totalRecords / 10) + 1
            : totalRecords / 10;
    }

    private async Task TablePageChanged(int SelectedPage)
    {
        currentPage = SelectedPage;
        await GetAllTableRecords();
    }

    private void CreateCustomerModal()
    {
        customer = new CustomerViewModel();
        customer.Id = 0;

        showCustomerPopup = true;
    }

    private void CloseCustomerModal()
    {
        showCustomerPopup = false;
    }

    private async Task CreateCustomer()
    {
        isEdit = false;
        showCustomerPopup = false;

        if (customer.Id == 0)
        {
            var newCustomer = new CustomerViewModel()
            {
                CellPhone = customer.CellPhone,
                Email = customer.Email,
                FullName = customer.FullName
            };

            var result = customerService.CreateCustomerAsync(newCustomer);
        }
        else
        {
            var result = customerService.UpdateCustomerAsync(customer);
        }

        await GetAllTableRecords();
    }

    void EditCustomerModal(CustomerViewModel customerRecord)
    {
        isEdit = true;
        customer = customerRecord;
        showCustomerPopup = true;
    }

    private async Task DeleteCustomer(CustomerViewModel customerRecord)
    {
        var messageString = $"آیا از حذف مشتری «{customerRecord.FullName}» مطمئن هستید؟";
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", messageString);

        if (confirmed)
        {
            await customerService.DeleteCustomerAsync(customerRecord.Id);
            await GetAllTableRecords();
        }
    }

    #endregion

}
